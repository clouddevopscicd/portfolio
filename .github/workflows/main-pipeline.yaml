name: CICD pipeline with Github Actions Strategy (Build, Test, SonarQube, Docker, Trivy)

on:
  push:
    branches: [ main, release ]
  pull_request:
    branches: [ main, release ]
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }}
  REGISTRY: docker.io/${{ vars.DOCKER_USERNAME }}

jobs:

  build-and-test:
    name: Build, Lint, Test with Matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [ 3.11, 3.12 ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug Python Version
        run: echo "Python version is ${{ matrix.python-version }}"

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Dependencies
        run: |
          set -e
          pip install -r requirements.txt
          pip install flake8 pytest

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PWD" >> $GITHUB_ENV

      - name: Lint Application
        run: |
          set -e
          flake8 .

      - name: Run Unit Tests
        run: |
          set -e
          pytest tests

  sonarqube-analysis:
    name: SonarQube Static Analysis & Quality Gate
    runs-on: self-hosted
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for SonarQube Readiness
        run: |
          for i in {1..10}; do
            STATUS=$(curl -s http://localhost:9000/api/system/status | grep -o 'UP')
            if [ "$STATUS" = "UP" ]; then
              echo "SonarQube is ready."
              exit 0
            fi
            echo "Waiting for SonarQube to be ready..."
            sleep 10
          done
          echo "SonarQube not ready after timeout."
          exit 1

      - name: SonarQube Scan with Timeout
        uses: sonarsource/sonarqube-scan-action@v2
        with:
          projectBaseDir: .
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        timeout-minutes: 5

      - name: SonarQube Quality Gate Check
        uses: sonarsource/sonarqube-quality-gate-action@v1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker-build-scan:
    name: Build Docker Image, Scan with Trivy, Push to Registry
    runs-on: self-hosted
    needs: sonarqube-analysis

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: |
          set -e
          docker build -t $REGISTRY/$IMAGE_NAME:${{ github.sha }} .

      - name: Trivy Vulnerability Scan
        run: |
          set -e
          trivy image -f json -o trivy-report.json $REGISTRY/$IMAGE_NAME:${{ github.sha }}

      - name: Upload Trivy Report (Runs Always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Push Docker Image
        run: |
          set -e
          docker push $REGISTRY/$IMAGE_NAME:${{ github.sha }}

  deploy-to-vm:
    name: Deploy Docker Image on RedHat VM
    runs-on: self-hosted
    needs: docker-build-scan

    steps:
      - name: Docker Login
        run: |
          set -e
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull & Run Container
        run: |
          set -e
          docker pull $REGISTRY/$IMAGE_NAME:${{ github.sha }}
          docker stop app || true
          docker rm app || true
          docker run -d -p 8000:8000 --name app $REGISTRY/$IMAGE_NAME:${{ github.sha }}
